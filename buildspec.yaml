version: 0.2
env:
  variables:
    PROJECT_NAME: $PROJECT_NAME 
    ECR_REGISTRY_URI: $ECR_REGISTRY_URI 
    ECR_REGION: $ECR_REGION 
    LAMBDA_CONTAINER_NAME: $LAMBDA_CONTAINER_NAME 
    ALIAS_NAME: $ALIAS_NAME 
    BRANCH_NAME: $BRANCH_NAME
phases:
  pre_build:
    commands:
      - echo Authenticating with Amazon ECRâ€¦
      - aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URI
  build:
    commands:
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - COMMIT_TIME=$(date +%Y%m%d%H%M%S)
      - IMAGE_TAG="$COMMIT_TIME-$BRANCH_NAME-$COMMIT_HASH"
      - export IMAGE_TAG
      - echo image tag , $IMAGE_TAG
      - docker build -t $PROJECT_NAME . -f Dockerfile.aws.lambda
      - docker tag $PROJECT_NAME:latest $ECR_REGISTRY_URI/$PROJECT_NAME:$IMAGE_TAG
      - docker push $ECR_REGISTRY_URI/$PROJECT_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo  image tag $IMAGE_TAG  
      - IMAGE_URI=$ECR_REGISTRY_URI/$PROJECT_NAME:$IMAGE_TAG
      - echo updating lambda function with new docker container...
      - aws lambda update-function-code --function-name $LAMBDA_CONTAINER_NAME --image-uri $IMAGE_URI 
      - echo code 256 $CODE_256 , wating lambda function updating...
      - aws lambda wait function-updated --function-name $LAMBDA_CONTAINER_NAME
      - NEW_VERSION=$(aws lambda publish-version --function-name $LAMBDA_CONTAINER_NAME  --query 'Version' --output text)
      - echo Updating alias...
      - aws lambda update-alias --function-name $LAMBDA_CONTAINER_NAME --name $ALIAS_NAME --routing-config AdditionalVersionWeights={"$NEW_VERSION"=0.8 , "10"=0.2}
      # - aws lambda update-alias  --function-name $LAMBDA_CONTAINER_NAME --name $ALIAS_NAME --function-version $NEW_VERSION
      - echo Done!, Lambda function $LAMBDA_CONTAINER_NAME updated with Docker image $IMAGE_URI and ALIAS_NAME $ALIAS_NAME set to version $NEW_VERSION